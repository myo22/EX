package com.example.ex;

public class JavaClass {
    // 설계도면은 클래스와 흡사하다. -> 이 도면을 보고 실제 책상을 만드는데 이 실제 만들어진 책상을 오브젝트 or 인스턴스라고 합니다
// 책상이라는 오브젝트를 이용하는것이 객체 지향 프로그래밍이다.
// 클래스를 어떻게 만들까?를 고민하는게 아니라 메모리상에 존재하는 오브젝트(인스턴스)를 어떻게 만들까? or 이 인스턴스를 어떻게 이용할까?를 고민하는 것이다.
// 인스턴스를 특별한 이름으로 불러주고 싶다면 참조형 변수를 선언해준다. = 오브젝트(인스턴스)를 사용하려면 참조해야한다. -> 클래스 Book만으론 할수 있는게 없지만 Book b = new Book();가 나오면 가능하다.
// new Book();은 인스턴스가 생성되는 것이다. Book은 래퍼런스 타입이다.(여기서 기본형 타입은 값을 가지는 것이고 이 래퍼런스 타입은 객체를 참조하는 것이다.) 그리고 b는 참조 변수이다. Book()은 생성자이다.
// 만약 new Book();만 선언되서 참조하는 변수가 없다면 그건 garbage인 쓰레기다.

// 필드는 클래스의 속성, 메소드는 클래스의 기능이다.
// class 앞에는 접근제한자가 붙습니다(public, protected, private, default)
// 클래스 이름은 대문자로 작성하자!
// 단어와 단어가 만날 경우 2번째 단어의 시작은 대문자! (HelloWorld) = 카멜 표기법


// 자판기의 동작(동전넣기, 잔액 보여주기 , 물건 선택 버튼 클릭하기) = 메소드
// 명사 = 인스턴스 객체, 동사 = 메소드
// 자판기는 어떤 객체로 구성되어 있나 -> 액정표시장치, 동전통, 상품, 동전, 상품 선택 버튼, 버튼 눌린 정보를 받아 들인 중앙처리장치 등등 너무 많다.
// 이 객체들이 다른 제품에도 이용할 수 있다. 프로그램 설계에서 가장 핵심은 이름을 정하는 것이다. -> 자판기 -> 액정표시장치 -> 잔액표시기능 이렇게
// 즉 설계를 한다는 것은 객체의 이름을 정하고 객체와 객체 간의 관계를 표현하는것
}
